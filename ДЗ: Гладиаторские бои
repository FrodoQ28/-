using System;
using System.Collections.Generic;

namespace HW_gladiatorFights
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ConsoleMenu menu = new ConsoleMenu();

            menu.Work();
        }
    }

    class ConsoleMenu
    {
        const string CommandWatchFight = "1";
        const string CommandExit = "2";

        private Arena _arena;

        public ConsoleMenu()
        {
            _arena = new Arena();
        }

        public void Work()
        {
            bool isRunning = true;

            while (isRunning)
            {
                Console.Clear();

                Console.WriteLine($"Добро пожаловать на арену!\n" +
                                  $"Посмотреть бой - {CommandWatchFight}\n" +
                                  $"Выйти из программы - {CommandExit}");

                switch (Console.ReadLine())
                {
                    case CommandWatchFight:
                        _arena.ShowFight();
                        break;

                    case CommandExit:
                        isRunning = false;
                        break;

                    default:
                        Console.WriteLine("Такой команды нет.");
                        break;
                }

                Console.ReadKey();
            }
        }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max) =>
            s_random.Next(min, max);
    }

    class Arena
    {
        private List<Fighter> fighterList;

        public Arena()
        {
            fighterList = new List<Fighter>()
            {
                new Warrior(),
                new Knight(),
                new Barbarian(),
                new Wizard(),
                new Rogue()
            };
        }

        public void ShowFighters()
        {
            foreach (Fighter fighter in fighterList)
                fighter.ShowInfo();
        }

        public void ShowFight()
        {
            int fighterNumber = 0;

            Fighter fighter1 = default;
            Fighter fighter2 = default;

            Console.WriteLine("Доступные классы бойцов:");
            ShowFighters();

            fighter1 = GetFighter(++fighterNumber);
            fighter2 = GetFighter(++fighterNumber);

            Console.Clear();

            fighter1.ShowInfo();
            fighter2.ShowInfo();

            Console.ReadKey();

            Console.WriteLine("Битва началась.");

            while (fighter1.Health > 0 && fighter2.Health > 0)
            {
                Console.WriteLine(new string('-', 20));

                fighter1.Attack(fighter2);
                fighter2.Attack(fighter1);

                fighter1.ShowInfoInFight();
                fighter2.ShowInfoInFight();

                Console.WriteLine(new string('-', 20));
            }

            Console.Write("Бой окончен, ");

            if (fighter1.Health <= 0 && fighter2.Health <= 0)
                Console.WriteLine("ничья.");
            else if (fighter1.Health <= 0 && fighter2.Health > 0)
                Console.WriteLine("победил боец 2");
            else if (fighter1.Health > 0 && fighter2.Health <= 0)
                Console.WriteLine("победил боец 1");
        }

        public Fighter GetFighter(int fighterNumber)
        {
            bool isRunning = true;

            string userInput;

            Fighter fighter = default;
            Console.WriteLine($"Введите класс {fighterNumber} бойца:");

            while (isRunning)
            {
                userInput = Console.ReadLine();

                if (int.TryParse(userInput, out int fighterIndex))
                {
                    if (fighterIndex <= fighterList.Count && fighterIndex > 0)
                    {
                        fighterIndex--;

                        fighter = fighterList[fighterIndex].Clone($"Боец {fighterNumber} ");

                        isRunning = false;
                    }
                    else
                        Console.WriteLine("Неверный ввод");
                }
                else
                    Console.WriteLine("Неверный ввод");
            }

            return fighter;
        }
    }

    interface IDamageble
    {
        void TakeDamage(int damage);
    }

    class Fighter : IDamageble
    {
        protected string Name;
        protected string CharacterClass;
        protected string Description;
        protected int Damage;
        protected int Armor;

        public int Health { get; protected set; }

        public virtual void TakeDamage(int damage) =>
            Health -= damage - Armor;

        public void ShowInfo() =>
            Console.WriteLine($"{Name}. Класс - {CharacterClass}\nСпособность - {Description}\nЗдоровье - {Health}\nУрон - {Damage}\nБроня - {Armor}\n");

        public void ShowInfoInFight() =>
            Console.WriteLine($"{Name} Здоровье - {Health}");

        public virtual Fighter Clone(string name) =>
            new Fighter();

        public virtual void Attack(IDamageble fighter) { }
    }

    class Warrior : Fighter
    {
        public Warrior(string name = "1")
        {
            Name = name;
            CharacterClass = "Воин";
            Description = "С шансом в 20% наносит двойной урон";
            Health = 100;
            Damage = 15;
            Armor = 5;
        }

        public override void Attack(IDamageble fighter)
        {
            int maxChance = 101;
            int minChance = 0;
            int requiredChance = 20;

            if (UserUtils.GenerateRandomNumber(minChance, maxChance) <= requiredChance)
            {
                Console.WriteLine($"Двойная атака! Критический урон {Damage * 2} ед.");

                fighter.TakeDamage(Damage * 2);
            }
            else
            {
                Console.WriteLine($"Обычная атака. Нанесенный урон {Damage} ед.");

                fighter.TakeDamage(Damage);
            }
        }

        public override Fighter Clone(string name) =>
            new Warrior(name);
    }

    class Knight : Fighter
    {
        private int _attackNumber;

        public Knight(string name = "2")
        {
            Name = name;
            CharacterClass = "Рыцарь";
            Description = "Каждая третья атака наносит двойной урон";
            Health = 100;
            Damage = 12;
            Armor = 7;
            _attackNumber = default;
        }

        public override void Attack(IDamageble fighter)
        {
            int requiredAttackNumber = 3;

            if (++_attackNumber % requiredAttackNumber == 0)
            {
                Console.WriteLine($"Третья атака! Критический урон {Damage * 2} ед.");

                fighter.TakeDamage(Damage * 2);
            }
            else
            {
                Console.WriteLine($"Обычная атака. Нанесенный урон {Damage} ед.");

                fighter.TakeDamage(Damage);
            }
        }

        public override Fighter Clone(string name) =>
            new Knight(name);
    }

    class Barbarian : Fighter
    {
        private int _damageAmount;
        private int _requiredDamageAmount;
        private int _healingAmont;

        public Barbarian(string name = "3")
        {
            Name = name;
            CharacterClass = "Варвар";
            Health = 100;
            Damage = 12;
            Armor = 7;
            _damageAmount = default;
            _requiredDamageAmount = 70;
            _healingAmont = 20;
            Description = $"Ярость - Накапливая {_requiredDamageAmount} ед. урона лечит {_healingAmont} ед. здоровья";
        }

        public override void TakeDamage(int damage)
        {
            base.TakeDamage(damage);

            _damageAmount += damage;

            if (_damageAmount >= _requiredDamageAmount && Health > 0)
            {
                Health += _healingAmont;
                _damageAmount = 0;

                Console.WriteLine($"{Name} в ярости! Восстановлено {_healingAmont} ед. здоровья");
            }
        }

        public override void Attack(IDamageble fighter)
        {
            Console.WriteLine($"Обычная атака. Нанесенный урон {Damage} ед.");

            fighter.TakeDamage(Damage);
        }

        public override Fighter Clone(string name) =>
            new Barbarian(name);
    }

    class Wizard : Fighter
    {
        private int _mana;
        private int _fireBallManaAmount;
        private int _fireBallDamage;

        public Wizard(string name = "4")
        {
            Name = name;
            CharacterClass = "Маг";
            Health = 100;
            Damage = 9;
            Armor = 5;
            _mana = 100;
            _fireBallManaAmount = 20;
            _fireBallDamage = 20;
            Description = $"Имеет {_mana} ед. маны. Использует заклинание огненный шар тратя по {_fireBallManaAmount} ед. маны.";
        }

        public override void Attack(IDamageble fighter)
        {
            if (_mana > 0)
            {
                Console.WriteLine($"Огненный шар! Нанесенный урон {_fireBallDamage} ед.");

                fighter.TakeDamage(_fireBallDamage);

                _mana -= _fireBallManaAmount;
            }
            else
            {
                Console.WriteLine($"Обычная атака. Нанесенный урон {Damage} ед.");

                fighter.TakeDamage(Damage);
            }
        }
        public override Fighter Clone(string name) =>
          new Wizard(name);
    }

    class Rogue : Fighter
    {
        public Rogue(string name = "5")
        {
            Name = name;
            CharacterClass = "Плут";
            Description = $"Имеет шанс в 20% уклониться от атаки";
            Health = 100;
            Damage = 9;
            Armor = 5;
        }

        public override void Attack(IDamageble fighter)
        {
            Console.WriteLine($"Обычная атака. Нанесенный урон {Damage} ед.");

            fighter.TakeDamage(Damage);
        }

        public override void TakeDamage(int damage)
        {
            int maxChance = 101;
            int minChance = 0;
            int requiredChance = 20;

            if (UserUtils.GenerateRandomNumber(minChance, maxChance) >= requiredChance)
            {
                base.TakeDamage(damage);
            }
            else
            {
                Console.WriteLine("Выполнен уворот! Урон не прошел.");
            }
        }
        public override Fighter Clone(string name) =>
            new Rogue(name);
    }
}
