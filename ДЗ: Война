using System;
using System.Collections.Generic;

namespace HW_war
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ConsoleMenu consoleMenu = new ConsoleMenu();

            consoleMenu.Work();
        }
    }

    class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max) =>
            s_random.Next(min, max);
    }

    interface IDamagble
    {
        void TakeDamage(int damage);
    }

    class ConsoleMenu
    {
        private Battlefield _battlefield;

        public ConsoleMenu()
        {
            _battlefield = new Battlefield();
        }

        public void Work()
        {
            Console.WriteLine("Одна из битв в забытой войне.");
            _battlefield.ShowInfo();
            Console.ReadKey();

            Console.Clear();
            Console.WriteLine("Битва начинается.");

            while (_battlefield.HaveSoldiers())
            {
                _battlefield.RunBattle();
            }
        }
    }

    class Battlefield
    {
        private Platoon _platoon1;
        private Platoon _platoon2;

        public Battlefield()
        {
            _platoon1 = new Platoon();
            _platoon2 = new Platoon();
        }

        public void ShowInfo()
        {
            Console.WriteLine("\nВзвод 1:");
            _platoon1.ShowInfo();

            Console.WriteLine("\nВзвод 2:");
            _platoon2.ShowInfo();
        }

        public void RunBattle()
        {
            _platoon1.Attack(_platoon2.CloneListSoldiers());
            _platoon2.Attack(_platoon1.CloneListSoldiers());

            _platoon1.RemoveDeadSoldiers();
            _platoon2.RemoveDeadSoldiers();
        }

        public bool HaveSoldiers()
        {
            if (_platoon1.HaveSoliders && _platoon2.HaveSoliders)
            {
                return true;
            }
            else if (_platoon1.HaveSoliders == false)
            {
                Console.WriteLine("Взвод 1 уничтожен.\nВыжившие бойцы 2 взвода:\n");
                _platoon2.ShowInfo();

                return false;
            }
            else
            {
                Console.WriteLine("Взвод 2 уничтожен.\nВыжившие бойцы 1 взвода:\n");
                _platoon1.ShowInfo();

                return false;
            }
        }
    }

    class Platoon
    {
        private List<Soldier> _soldiers;

        public Platoon()
        {
            _soldiers = new List<Soldier>();

            AddSoldiers();
        }

        public bool HaveSoliders
        {
            get => _soldiers.Count > 0;
            private set { }
        }

        public void ShowInfo()
        {
            foreach (var soldier in _soldiers)
                Console.WriteLine(soldier.Name);
        }

        public void Attack(List<IDamagble> soldiers)
        {
            foreach (var soldier in _soldiers)
                soldier.Attack(soldiers);
        }

        public List<IDamagble> CloneListSoldiers() =>
            new List<IDamagble>(_soldiers);

        public void RemoveDeadSoldiers()
        {
            List<int> deadSoldiersIndexes = new List<int>();

            foreach (var soldier in _soldiers)
            {
                if (soldier.HaveHealth == false)
                    deadSoldiersIndexes.Add(_soldiers.IndexOf(soldier));
            }

            if (deadSoldiersIndexes.Count > 0)
            {
                for (int i = deadSoldiersIndexes.Count - 1; i >= 0; i--)
                    _soldiers.RemoveAt(deadSoldiersIndexes[i]);
            }
        }

        private void AddSoldiers()
        {
            _soldiers.Add(new Soldier());
            _soldiers.Add(new Soldier());
            _soldiers.Add(new Soldier());
            _soldiers.Add(new Soldier());
            _soldiers.Add(new Soldier());
            _soldiers.Add(new Sniper());
            _soldiers.Add(new GrenadeLauncher());
            _soldiers.Add(new MachineGunner());
        }
    }

    class Soldier : IDamagble
    {
        protected int Damage;

        private int _health;
        private int _armor;

        public Soldier(string name = "Солдат", int damage = 20)
        {
            Name = name;
            _health = 100;
            Damage = damage;
            _armor = 10;
        }

        public bool HaveHealth
        {
            get => _health > 0;
            private set { }
        }

        public string Name { get; protected set; }

        public void TakeDamage(int damage) =>
            _health -= damage - _armor;

        public virtual void Attack(List<IDamagble> soldiers)
        {
            soldiers[UserUtils.GenerateRandomNumber(0, soldiers.Count)].TakeDamage(Damage);
        }
    }

    class Sniper : Soldier
    {
        public Sniper() : base("Снайпер", 50) { }
    }

    class GrenadeLauncher : Soldier
    {
        public GrenadeLauncher() : base("Гранатометчик") { }

        public override void Attack(List<IDamagble> soldiers)
        {
            int attacksAmount = 4;

            IDamagble tempSoldier;

            Queue<IDamagble>tempSoldiers = new Queue<IDamagble>();

            while (tempSoldiers.Count < attacksAmount)
            {
                tempSoldier = soldiers[UserUtils.GenerateRandomNumber(0, soldiers.Count)];

                if (tempSoldiers.Contains(tempSoldier) == false)
                    tempSoldiers.Enqueue(tempSoldier);
            }

            for (int i = tempSoldiers.Count - 1; i >= 0; i--)
                tempSoldiers.Dequeue().TakeDamage(Damage);
        }
    }

    class MachineGunner : Soldier
    {
        public MachineGunner() : base("Пулеметчик") { }

        public override void Attack(List<IDamagble> soldiers)
        {
            int attacksAmount = 3;

            for (int i = 0; i < attacksAmount; i++)
            {
                base.Attack(soldiers);
            }
        }
    }
}
