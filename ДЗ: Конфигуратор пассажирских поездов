using System;
using System.Collections.Generic;
using System.Linq;

namespace HW_configuratorTrains
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ConsoleMenu menu = new ConsoleMenu();

            menu.Work();
        }
    }

    class ConsoleMenu
    {
        public void Work()
        {
            const string CommandExit = "0";
            const string CommandCreateTrain = "1";

            bool isRunning = true;

            Dispatcher dispatcher = new Dispatcher();

            while (isRunning)
            {
                Console.Clear();
                Console.Write($"Добро пожаловать в программу \"Весёлый диспетчер\"\n" + new string('*', 120));

                dispatcher.ShowAllTrains();

                Console.Write($"Чтобы создать новый поезд введите - {CommandCreateTrain}\n" +
                              $"Чтобы выйти из программы введите - {CommandExit}\n" +
                              $"Введите команду: ");

                switch (Console.ReadLine())
                {
                    case CommandCreateTrain:
                        dispatcher.AddTrain();
                        break;

                    case CommandExit:
                        isRunning = false;
                        break;

                    default:
                        Console.WriteLine("Такой команды нет.");
                        break;
                }

                Console.ReadKey();
            }
        }
    }

    class Dispatcher
    {
        private Random _random;
        private List<Train> _trains;

        public Dispatcher()
        {
            _random = new Random();

            _trains = new List<Train>();
        }

        public void AddTrain()
        {
            int minPassengersNumber = 20;
            int maxPassengersNumber = 301;
            int passengersAmount = _random.Next(minPassengersNumber, maxPassengersNumber);

            bool isCorrectWay = false;

            List<Wagon> wagons;

            wagons = GetWagons(passengersAmount);

            while (isCorrectWay == false)
            {
                if (EnterDirection(out Direction direction))
                {
                    isCorrectWay = true;
                    _trains.Add(new Train(wagons, direction));
                }
                else
                {
                    Console.WriteLine("Пункт назначения и отправки не могут быть одинаковыми.");
                    Console.ReadKey();
                }
            }

            Console.WriteLine($"Количество пассажиров купивших билет на поезд - {passengersAmount} человек.");
            Console.WriteLine("Поезд успешно создан.");
        }

        public void ShowAllTrains()
        {
            foreach (var train in _trains)
            {
                train.ShowStatistic();

                Console.WriteLine(new string('*', 120));
            }
        }

        private bool EnterDirection(out Direction direction)
        {
            string departurePoint;
            string arryvalPoint;

            direction = default;

            Console.WriteLine("Введите название пункта отправки поезда:");
            departurePoint = Console.ReadLine();

            Console.WriteLine("Введите название пункта прибытия поезда:");
            arryvalPoint = Console.ReadLine();

            if (departurePoint.ToLower() != arryvalPoint.ToLower())
            {
                direction = new Direction(departurePoint, arryvalPoint);

                return true;
            }
            else
            {
                return false;
            }
        }

        private List<Wagon> GetWagons(int passengersAmount)
        {
            List<Wagon> wagons = new List<Wagon>();

            int wagonNumber = 0;

            for (int i = 0; i < passengersAmount;)
            {
                wagons.Add(new Wagon(++wagonNumber, passengersAmount));

                passengersAmount -= wagons.Last<Wagon>().PassengersAmount;
            }

            return wagons;
        }
    }

    class Train
    {
        private Direction _direction;

        private List<Wagon> _wagons;

        public Train(List<Wagon> wagons, Direction direction)
        {
            _wagons = new List<Wagon>();

            _direction = direction;

            AddWagons(wagons);

            ShowStatistic();
        }

        private void AddWagons(List<Wagon> wagons)
        {
            foreach (Wagon wagon in wagons)
                _wagons.Add(wagon);
        }

        public void ShowStatistic()
        {
            Console.Write($"Поезд ");

            _direction.ShowWay();

            foreach (var wagon in _wagons)
                Console.WriteLine($"Вагон №{wagon.CarriageNumber}. Количество пассажиров - {wagon.PassengersAmount}, количество свободных мест - {wagon.AvailableSeats}");
        }
    }

    class Direction
    {
        private string _departurePoint;
        private string _arryvalPoint;

        public Direction(string departurePoint, string arryvalPoint)
        {
            _departurePoint = departurePoint;
            _arryvalPoint = arryvalPoint;
        }

        public void ShowWay()
        {
            Console.WriteLine(_departurePoint + " - " + _arryvalPoint);
        }
    }

    class Wagon
    {
        public Wagon(int carriageNumber, int passengerAmount)
        {
            PassengersAmount = default;
            AvailableSeats = 30;
            CarriageNumber = carriageNumber;

            AddPassengers(passengerAmount);
        }

        public int PassengersAmount { get; private set; }
        public int AvailableSeats { get; private set; }
        public int CarriageNumber { get; private set; }

        private void AddPassengers(int passengersAmount)
        {
            if (passengersAmount > AvailableSeats)
            {
                passengersAmount = AvailableSeats;
            }

            for (int i = 0; i < passengersAmount; i++)
            {
                PassengersAmount++;
                AvailableSeats--;
            }
        }
    }
}
