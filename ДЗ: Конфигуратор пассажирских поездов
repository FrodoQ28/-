using System;
using System.Collections.Generic;

namespace HW_configuratorTrains
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ConsoleMenu menu = new ConsoleMenu();

            menu.StartWork();
        }
    }

    class ConsoleMenu
    {
        public void StartWork()
        {
            const string CommandExit = "0";
            const string CommandCreateTrain = "1";

            bool IsRunning = true;

            Dispatcher dispatcher = new Dispatcher();

            while (IsRunning)
            {
                Console.Clear();
                Console.Write($"Добро пожаловать в программу \"Весёлый диспетчер\"\n" + new string('*', 120));

                dispatcher.ShowAllTrains();

                Console.Write($"Чтобы создать новый поезд введите - {CommandCreateTrain}\n" +
                              $"Чтобы выйти из программы введите - {CommandExit}\n" +
                              $"Введите команду: ");

                switch (Console.ReadLine())
                {
                    case CommandCreateTrain:
                        dispatcher.AddTrain();
                        break;

                    case CommandExit:
                        IsRunning = false;
                        break;

                    default:
                        Console.WriteLine("Такой команды нет.");
                        break;
                }

                Console.ReadKey();
            }
        }
    }

    class Dispatcher
    {
        private Random _random;
        private List<Train> _trains;

        public Dispatcher()
        {
            _random = new Random();

            _trains = new List<Train>();
        }

        public void AddTrain()
        {
            string departurePoint;
            string arryvalPoint;
            int minPassengersNumber = 20;
            int maxPassengersNumber = 301;
            int passengersNumber = _random.Next(minPassengersNumber, maxPassengersNumber);

            List<Wagon> wagons;

            Console.WriteLine("Введите название пункта отправки поезда:");
            departurePoint = Console.ReadLine();

            Console.WriteLine("Введите название пункта прибытия поезда:");
            arryvalPoint = Console.ReadLine();

            Console.WriteLine($"Количество пассажиров купивших билет на поезд \"{departurePoint} - {arryvalPoint}\" - {passengersNumber} человек.");

            wagons = GetWagons(passengersNumber);

            _trains.Add(new Train(departurePoint, arryvalPoint, wagons));

            Console.WriteLine("Поезд успешно создан.");
        }

        public void ShowAllTrains()
        {
            foreach (var train in _trains)
            {
                train.ShowTrainStatistic();

                Console.WriteLine(new string('*', 120));
            }
        }

        private List<Wagon> GetWagons(int passengersNumber)
        {
            List<Wagon> wagons = new List<Wagon>();

            int wagonNumber = 0;

            for (int i = 0; i < passengersNumber;)
            {
                wagons.Add(new Wagon(++wagonNumber, ref passengersNumber));
            }

            return wagons;
        }
    }

    class Train
    {
        private string _direction;

        private List<Wagon> _wagons;

        public Train(string departurePoint, string arryvalPoint, List<Wagon> wagons)
        {
            _wagons = new List<Wagon>();

            _direction = departurePoint + '-' + arryvalPoint;

            AddWagons(wagons);

            ShowTrainStatistic();
        }

        private void AddWagons(List<Wagon> wagons)
        {
            foreach(Wagon wagon in wagons)
                _wagons.Add(wagon);
        }

        public void ShowTrainStatistic()
        {
            Console.WriteLine($"Поезд {_direction}:");

            foreach (var wagon in _wagons)
            {
                Console.WriteLine($"Вагон №{wagon.CarriageNumber}. Количество пассажиров - {wagon.TicketsSaleNumber}, количество свободных мест - {wagon.SeatsFree}");
            }
        }
    }

    class Wagon
    {

        public Wagon(int carriageNumber, ref int passengerNumber)
        {
            TicketsSaleNumber = default;
            SeatsFree = 30;
            CarriageNumber = carriageNumber;

            AddPassengers(ref passengerNumber);
        }

        public int TicketsSaleNumber {  get; private set; }
        public int SeatsFree { get; private set; }
        public int CarriageNumber { get; private set; }

        private void AddPassengers(ref int passengersNumber)
        {
            for (int i = 0; i < SeatsFree && i < passengersNumber; SeatsFree--)
            {
                TicketsSaleNumber++;
                passengersNumber--;
            }
        }
    }
}
