using System;
using System.Collections.Generic;
using System.Linq;

namespace HW_anarchyInHospital
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Hospital hospital = new Hospital();

            hospital.Work();
        }
    }

    public class Hospital
    {
        private List<Patient> _patients;

        public Hospital()
        {
            SickPersonFactory sickPersonFactory = new SickPersonFactory();

            _patients = sickPersonFactory.CreatePatients();
        }

        public void Work()
        {
            const string CommandSortByName = "1";
            const string CommandSortByAge = "2";
            const string CommandFindByDiagnosis = "3";
            const string CommandExit = "0";

            bool isRunning = true;

            while (isRunning)
            {
                Console.Clear();
                Console.WriteLine("Это больница.");

                ShowInfo();

                Console.WriteLine($"\nОтсортировать по ФИО - {CommandSortByName}\n" +
                                  $"Отсортировать по возрасту - {CommandSortByAge}\n" +
                                  $"Найти по болезни - {CommandFindByDiagnosis}\n" +
                                  $"Выйти - {CommandExit}");

                switch (Console.ReadLine())
                {
                    case CommandSortByName:
                        SortByName();
                        break;

                    case CommandSortByAge:
                        SortByAge();
                        break;

                    case CommandFindByDiagnosis:
                        FindByDiagnosis();
                        break;

                    case CommandExit:
                        isRunning = false;
                        break;

                    default:
                        Console.WriteLine("Такой команды нет.");
                        break;
                }

                Console.ReadKey();
            }
        }

        private void SortByName()
        {
            List<Patient> sortedPatients = _patients.OrderBy(patient =>  patient.Name).ToList();

            sortedPatients.ForEach(patient => patient.ShowInfo());
        }

        private void SortByAge()
        {
            List<Patient> sortedPatients = _patients.OrderBy(patient => patient.Age).ToList();

            sortedPatients.ForEach(patient => patient.ShowInfo());
        }

        private void FindByDiagnosis()
        {
            string userInput;

            Console.WriteLine("Введите диагноз:");
            userInput = Console.ReadLine();

            List<Patient> sortedPatients = _patients.Where(patient => patient.Diagnosis.ToLower() == userInput.ToLower()).ToList();

            if (sortedPatients.Count > 0)
            {
                sortedPatients.ForEach(patient => patient.ShowInfo());
            }
            else
            {
                Console.WriteLine("Пациентов с такой болезнью нет.");
            }
        }

        private void ShowInfo()
        {
            Console.WriteLine("\nСписок пациентов:");

            _patients.ForEach(patient => patient.ShowInfo());
        }
    }

    public class Patient
    {
        public Patient(string name, string diagnosis, int age)
        {
            Name = name;
            Diagnosis = diagnosis;
            Age = age;
        }

        public string Name { get; }
        public string Diagnosis { get; }
        public int Age { get; }

        public void ShowInfo()
        {
            Console.WriteLine(Name + ", " + Age + " лет, " + Diagnosis);
        }
    }

    class SickPersonFactory
    {
        public List<Patient> CreatePatients()
        {
            List<Patient> patients = new List<Patient>
            {
                new Patient("Иванов Иван Иванович", "Простудомания", 25),
                new Patient("Сидоров Сидор Сидорович", "Пневмоалкоголизм", 50),
                new Patient("Магомедов Магомед Магомедович", "Пневмоалкоголизм", 41),
                new Patient("Ариев Ара Ариевич", "Ротооткрытость", 35),
                new Patient("Армэнов Армэн Армэнович", "Ротооткрытость", 36),
                new Patient("Баяров Баяр Баярович", "Антисознание", 85),
                new Patient("Айдаров Айдар Айдарович", "Антисознание", 47),
                new Patient("Аннова Анна Анновна", "Простудомания", 15),
                new Patient("Перизатова Перизат Перизатовна", "Антисознание", 32),
                new Patient("Цырелмова Цырелма Цырелмовна", "Простудомания", 62)
            };

            return patients;
        }
    }
}
