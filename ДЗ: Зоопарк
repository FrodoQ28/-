using System;
using System.Collections.Generic;

namespace HW_zoo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Zoo zoo = new Zoo();

            zoo.Work();
        }
    }

    public enum Gender
    {
        male,
        female
    }

    public class Zoo
    {
        private List<Animal> _animalsList;
        private List<Aviary> _aviarys;

        public Zoo()
        {
            _animalsList = new List<Animal>();
            _aviarys = new List<Aviary>();

            FillAnimalList();

            FillAviaryList();
        }

        public void Work()
        {
            const int CommandExit = 0;

            bool isRunning = true;

            while (isRunning)
            {
                ShowInfo();

                Console.WriteLine($"Введите номер вольера к которому хотите отправиться или {CommandExit} для выхода:");

                if (int.TryParse(Console.ReadLine(), out int userInput) && userInput <= _aviarys.Count && userInput > CommandExit)
                {
                    userInput--;

                    _aviarys[userInput].ShowInfo();
                }
                else if (userInput == CommandExit)
                {
                    isRunning = false;
                }
                else
                {
                    Console.WriteLine("Такого вольера нет.");
                }

                Console.ReadKey();
                Console.Clear();
            }
        }

        private void ShowInfo()
        {
            int extensionNumberToIndex = 1;

            Console.WriteLine("Это зоопарк.\nВ зоопарке содержатся:");

            foreach (var animal in _animalsList)
            {
                Console.Write(_animalsList.IndexOf(animal) + extensionNumberToIndex + ".");

                animal.ShowName();
            }
        }

        private void FillAnimalList()
        {
            _animalsList.Add(new Elephant());
            _animalsList.Add(new Giraffe());
            _animalsList.Add(new Hare());
            _animalsList.Add(new Lion());
        }

        private void FillAviaryList()
        {
            for (int i = 0; i < _animalsList.Count; i++)
            {
                _aviarys.Add(new Aviary(_animalsList[i]));
            }
        }
    }

    public class Aviary
    {
        private string _name;
        private string _description;

        private List<Animal> _animals;

        public Aviary(Animal animal)
        {
            _animals = new List<Animal>();

            UserUtils.AddAnimals(animal, _animals);

            _name = _animals[0].Name + " - ";
            _description = _animals[0].Description + " " + _animals[0].CreatureSound;
        }

        public void ShowInfo()
        {
            Console.WriteLine(_name + _description);
            Console.WriteLine($"\nВ вольере содержатся {_animals.Count} животных:");

            for (int i = 0; i < _animals.Count;)
                _animals[i].ShowInfo(++i);
        }
    }

    public abstract class Animal
    {
        private Gender _gender;

        public Animal(string name, Gender gender, string description, string creatureSound)
        {
            Description = description;
            Name = name;
            _gender = gender;
            CreatureSound = creatureSound;
        }

        public string Name { get; }
        public string Description { get; }
        public string CreatureSound { get; }

        public abstract Animal Clone();

        public void ShowInfo(int animalNumber) =>
            Console.WriteLine($"{animalNumber}.{Name}. Пол {_gender}.");

        public void ShowName() =>
            Console.WriteLine(Name);
    }

    public class Elephant : Animal
    {
        public Elephant() : base("Слон", UserUtils.GetGender(),
            "Крупное травоядное млекопитающее с длинным хоботом и двумя бивнями.", "Издает трубный звук.") { }

        public override Animal Clone() =>
            new Elephant();
    }

    public class Giraffe : Animal
    {
        public Giraffe() : base("Жираф", UserUtils.GetGender(),
            "Парнокопытное млекопитающее из семейства жирафовых. Самое высокое наземное животное планеты.",
            "Жирафы общаются между собой на частотах ниже 20 Гц, которые не слышны для человеческого слуха.") { }

        public override Animal Clone() =>
            new Giraffe();
    }

    public class Hare : Animal
    {
        public Hare() : base("Заяц", UserUtils.GetGender(),
            "Род из семейства зайцевых. Отличаются длинными ушами, коротким поднятым хвостом, " +
                "недоразвитыми ключицами, длинными задними лапами, что позволяет им двигаться прыжками",
            "В основном не издает звуков.") { }

        public override Animal Clone() =>
            new Hare();
    }

    public class Lion : Animal
    {
        public Lion() : base("Лев", UserUtils.GetGender(),
            "Один из видов крупных хищных млекопитающих, представитель семейства кошачьих", "Рычит.") { }

        public override Animal Clone() =>
            new Lion();
    }

    public class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomNumber(int min, int max) =>
            s_random.Next(min, max);

        public static Gender GetGender()
        {
            int minGender = 0;
            int maxGender = 2;

            return (Gender)GenerateRandomNumber(minGender, maxGender);
        }

        public static void AddAnimals(Animal animal, List<Animal> animals)
        {
            int minAnimalAmount = 2;
            int maxAnimalAmount = 10;
            int animalAmount = UserUtils.GenerateRandomNumber(minAnimalAmount, maxAnimalAmount);

            for (int i = 0; i < animalAmount; i++)
                animals.Add(animal.Clone());
        }
    }
}
